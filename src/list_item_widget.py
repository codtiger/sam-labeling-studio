# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'customwidget.ui'
#
# Created by: PyQt6 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import QColor, QPalette, QAction, QCursor

from PyQt6.QtCore import pyqtSignal, QPoint


class CustomListItemWidget(QtWidgets.QWidget):
    deleted = pyqtSignal(int)

    def __init__(self, classes: list = [], parent=None):
        super(CustomListItemWidget, self).__init__(parent)
        self.classes = classes
        # self.mask_id = mask_id
        # self.setAutoFillBackground(True)
        # self.setStyleSheet("background-color: lightblue; border: 1px solid black;")
        self.setupUi()

    def setupUi(
        self,
    ):
        self.setObjectName("ObjectListItem")

        # Set size policy to expand horizontally
        self.setSizePolicy(
            QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed
        )

        self.horizontalLayout = QtWidgets.QHBoxLayout(self)
        self.horizontalLayout.setContentsMargins(4, 4, 4, 4)  # Add some margins
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")

        self.object_label = QtWidgets.QLabel(self)
        self.object_label.setObjectName("object_label")
        self.verticalLayout.addWidget(self.object_label)

        self.shape_label = QtWidgets.QLabel(self)
        self.shape_label.setObjectName("shape_label")
        self.verticalLayout.addWidget(self.shape_label)

        self.horizontalLayout.addLayout(self.verticalLayout)
        self.horizontalLayout.addStretch(1)  # Add stretch to push widgets to left

        self.label_combo_box = QtWidgets.QComboBox(self)
        self.label_combo_box.setObjectName("label_combo_box")
        for label in self.classes:
            self.label_combo_box.addItem(label)
        self.label_combo_box.setSizePolicy(
            QtWidgets.QSizePolicy.Policy.Expanding,  # This is the key change
            QtWidgets.QSizePolicy.Policy.Fixed,
        )
        self.horizontalLayout.addWidget(self.label_combo_box, 3)

        self.lock_button = QtWidgets.QToolButton(self)
        self.lock_button.setObjectName("lock_button")
        self.lock_button.setText("ðŸ”’")
        self.horizontalLayout.addWidget(self.lock_button)

        self.pin_button = QtWidgets.QToolButton(self)
        self.pin_button.setObjectName("pin_button")
        self.pin_button.setText("ðŸ“Œ")
        self.horizontalLayout.addWidget(self.pin_button)

        self.object_menu_button = QtWidgets.QToolButton(self)
        self.object_menu_button.setObjectName("menu_button")
        self.object_menu_button.setText("â‹®")
        self.object_menu_button.setStyleSheet("border:none;")
        self.object_menu_button.clicked.connect(self.show_options)
        self.horizontalLayout.addWidget(self.object_menu_button)
        # Setting stretch factor for the widgets
        self.horizontalLayout.setStretch(0, 20)  # Labels get 20%
        self.horizontalLayout.setStretch(1, 5)  # Stretch gets 5%
        self.horizontalLayout.setStretch(2, 45)  # Combo box gets 60%
        self.horizontalLayout.setStretch(3, 8)  # Lock button gets 7.5%
        self.horizontalLayout.setStretch(4, 7)  # Pin button gets 7.5%
        self.horizontalLayout.setStretch(5, 5)  # Menu button gets 5%

    def setupFields(self, mask_id: int = 0, label: str = "RTU", shape_type="Polygon"):
        self.object_label.setText(f"Object {mask_id}")
        self.shape_label.setText(shape_type)

        self.label_combo_box.setCurrentText(label)

    def show_options(self):
        menubar = QtWidgets.QMenuBar(self)
        menu = menubar.addMenu("")
        if menu:
            delete_action = QAction("delete")
            menu.addAction(delete_action)
            menu.triggered.connect(lambda _: self.deleted.emit(1))
            mouse_pos = self.mapFromGlobal(QPoint(self.cursor().pos()))
            # menu.move(mouse_pos - QPoint(0, menu.height() + 5))  # 5px above mouse
            menu.exec(QCursor().pos())  # Show dropdown immediately
